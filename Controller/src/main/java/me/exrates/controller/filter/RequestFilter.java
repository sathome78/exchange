package me.exrates.controller.filter;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.servlet.*;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by Valk on 18.07.2016.
 */

public class RequestFilter implements Filter {
    private static final Logger LOGGER = LogManager.getLogger(RequestFilter.class);

    private static RequestFilter instance = new RequestFilter();
    private Set<String> onlineMethods = new HashSet<>();

    private RequestFilter() {
    }

    public static RequestFilter getInstance() {
        return instance;
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
     /*   String path = ((HttpServletRequest) request).getServletPath();
        boolean resetSessionLifetimeHard = false;
        *//*"refreshIfNeeded" is false when the request is generated by user activity *//*
        if (OnlineRestController.SESSION_LIFETIME_HARD != 0
                && !path.matches("^/rest/.*")
                && !path.matches("^/api/.*")
                && !path.matches("^/client/.*")
                && !path.matches("^/public/.*")
                && ("false".equals(request.getParameter("refreshIfNeeded"))
                || !onlineMethods
                .stream()
                .filter(e -> (e.matches(".*//*$") && path.matches("^" + e + ".*")) || (e.matches(".*[^/]$") && path.equals(e)))
                .findFirst()
                .isPresent())) {
            resetSessionLifetimeHard = true;
        }
        if (resetSessionLifetimeHard) {
            LOGGER.debug(" resetSessionLifetimeHard by request: " + path);
            ((HttpServletRequest) request).getSession().setAttribute("sessionEndTime", new Date().getTime() + OnlineRestController.SESSION_LIFETIME_HARD * 1000);
        }*/
        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {

    }

    public Set<String> getOnlineMethods() {
        return onlineMethods;
    }

    public void setOnlineMethods(Set<String> onlineMethods) {
        this.onlineMethods = onlineMethods;
    }
}
